// Defines the orchestration schedule and meta data.
{
    "maximum_state_change_delay": 5, // in ms; if the Node Manager detects a larger delay, the orchestration schedule exeuction is invalid
    // Each state comprises instructions and conditions for state transitions.
    "states": [
        {
            "state_name": "initial", // it is a good idea to have an initial state that resets resource manipulations
            "resource_manipulation_instructions": "reset", // this re-applies all manipulations from infrastructure.jsonc
            "application_instructios": [],
            // When all conditions for the transition to any stage are met, a transition to this state begins.
            "transition_conditions": [
                {
                    "type": "time-based", // the type can be time or event
                    "active-for": 10000, // how long to stay in this state if type = time
                    "next_state": "s1"
                },
                {
                    "type": "message-based",
                    "event_name": "abort",
                    "threshold": 1, // how often the defined event_name must be sent to the node manager transition endpoint
                    "next_state": "final"
                }
            ]
        },
        {
            "state_name": "s1",
            "resource_manipulation_instructions": {
                // Connection updates overwrite the connection properties of the initial state (defined in infrastructure.jsonc) and prior state updates.
                "connection_updates": [
                    {
                        "from": "factory-server",
                        "to": "cloud",
                        "delay": 100
                    }
                ]
                // other kinds of resource manipulations will be added in the future
            },
            // Application instructions will be sent via HTTP GET at the beginning of each state to all machines on which a target_container is deployed.
            "application_instructions": [
                {
                    "target_container": "adapt-packaging", // will be sent to the public ip and port of each machine that this container is deployed on (not affected by manipuations)
                    "path": "/config", // target url path for the instruction request
                    // these key-value pairs depend on the application running in the container => not interpreted by MockFog
                    "query_strings": {
                        "upperthreshold": 700
                    }
                }
            ],
            "transition_conditions": [
                // only when both conditions are met, transition to final begins
                {
                    "type": "time-based",
                    "active-for": 20000,
                    "next_state": "final"
                },
                {
                    "type": "message-based",
                    "event_name": "dashboard-updated",
                    "threshold": 5, // how often the defined event_name must be sent to the node manager transition endpoint
                    "next_state": "final"
                }
            ]
        },
        {
            "state_name": "final",
            "resource_manipulation_instructions": "reset",
            "application_instructions": [
                {
                    "target_container": "adapt-packaging",
                    "path": "/config",
                    "query_strings": {
                        "upperthreshold": "reset"
                    }
                }
            ],
            "transition_conditions": [] // the final event has no transition condition
        }
    ]
}
