{
  "swagger": "2.0",
  "info": {
    "description": "This is the swagger file for the MockFog2 agent. You can find out more about MockFog2 by visiting our GitHub [repository](https://github.com/MoeweX/MockFog2).",
    "version": "3.0.0",
    "title": "MockFog2",
    "contact": {
      "email": "hasenburg@tu-berlin.de"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/v3",
  "tags": [
    {
      "name": "status",
      "description": "Status of the node agent"
    },
    {
      "name": "network",
      "description": "Network manipulation operations"
    },
    {
      "name": "ping",
      "description": "Ping to other machines"
    },
    {
      "name": "docker",
      "description": "Get docker stats and apply resource limiations to containers"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/status/resources": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get information on available resources",
        "description": "Retrieve how much memory and how many CPU cores are available on the machine",
        "operationId": "getMemory",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Was able to retrieve resource information",
            "schema": {
              "$ref": "#/definitions/resources"
            }
          },
          "500": {
            "description": "Could not retrieve network information",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/network/tcconfig": {
      "put": {
        "tags": [
          "network"
        ],
        "summary": "Update the network configuration",
        "description": "Internally, this updates the network by appliying a tcconfig json file as produced by [tcshow](https://tcconfig.readthedocs.io/en/latest/pages/usage/tcshow/index.html)",
        "operationId": "updateNetworkConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A tcconfig json as produced by the tcshow command.",
            "schema": {
              "$ref": "#/definitions/tcconfig"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Applied network update"
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "get": {
        "tags": [
          "network"
        ],
        "summary": "Get the currently applied network configuration",
        "operationId": "getNetworkConfig",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The currently applied tcconfig",
            "schema": {
              "$ref": "#/definitions/tcconfig"
            }
          }
        }
      }
    },
    "/ping/all": {
      "get": {
        "tags": [
          "ping"
        ],
        "summary": "Get the complete ping history to all hosts configured with tcconfig",
        "operationId": "getPingHistory",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The complete ping history",
            "schema": {
              "$ref": "#/definitions/ping_history"
            }
          }
        }
      }
    },
    "/ping/last": {
      "get": {
        "tags": [
          "ping"
        ],
        "summary": "Get the last ping",
        "operationId": "getLastPing",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The last ping",
            "schema": {
              "$ref": "#/definitions/ping_single"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/ping/target": {
      "post": {
        "tags": [
          "ping"
        ],
        "summary": "Get pings to the given target hosts",
        "operationId": "getPingToTargets",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "An array of target host ip addresses to ping",
            "schema": {
              "$ref": "#/definitions/ip_list"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pings to the given target hosts",
            "schema": {
              "$ref": "#/definitions/ping_single"
            }
          },
          "400": {
            "description": "The given target hosts were not properly formatted"
          }
        }
      }
    },
    "/docker/stats": {
      "get": {
        "tags": [
          "docker"
        ],
        "summary": "Get docker stats",
        "operationId": "getDockerStats",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get memory and cpu stats per container",
            "schema": {
              "$ref": "#/definitions/docker_stats"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/docker/mcrlist": {
      "put": {
        "tags": [
          "docker"
        ],
        "summary": "Sets container resource limitations",
        "operationId": "setMCR",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A list of machine resource configurations",
            "schema": {
              "$ref": "#/definitions/mcrlist"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Update successful"
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "get": {
        "tags": [
          "docker"
        ],
        "summary": "Get the currently applied machine resource configurations",
        "operationId": "getMCR",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The currently applied tcconfig",
            "schema": {
              "$ref": "#/definitions/mcrlist"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "resources": {
      "type": "object",
      "properties": {
        "memory": {
          "type": "integer",
          "description": "Memory available on machine in megabyte"
        },
        "cpu": {
          "type": "number",
          "description": "Number of available CPU cores"
        }
      }
    },
    "tcconfig": {
      "type": "object",
      "properties": {
        "ens5": {
          "type": "object",
          "properties": {
            "outgoing": {
              "type": "object"
            },
            "incoming": {
              "type": "object"
            }
          }
        },
        "ens6": {
          "type": "object",
          "properties": {
            "outgoing": {
              "type": "object",
              "additionalProperties": true,
              "example": {
                "dst-network=10.0.2.33/32, protocol=ip": {
                  "filter_id": "800::800",
                  "delay": "10.0ms"
                },
                "dst-network=10.0.2.76/32, protocol=ip": {
                  "filter_id": "800::801",
                  "delay": "12.0ms"
                }
              }
            },
            "incoming": {
              "type": "object"
            }
          }
        }
      }
    },
    "ip_list": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "8.8.8.8"
      }
    },
    "ping_history": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ping_single"
      }
    },
    "ping_single": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "ping": {
            "type": "string"
          },
          "packetLoss": {
            "type": "string"
          },
          "time": {
            "type": "integer"
          }
        }
      }
    },
    "docker_stats": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "container_name": {
            "type": "string"
          },
          "memory": {
            "type": "object",
            "properties": {
              "raw": {
                "type": "string",
                "example": "30.4 MiB / 2.45 GiB"
              },
              "percent": {
                "type": "string",
                "example": "1.24%"
              }
            }
          },
          "cpu": {
            "type": "string",
            "example": "40.5%"
          }
        }
      }
    },
    "mcrlist": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "container_name": {
            "type": "string"
          },
          "cpu": {
            "type": "number",
            "example": 2
          },
          "memory": {
            "type": "string",
            "description": "Memory that should be availalbe to the container + unit: b, k, m, g; indicate bytes, kibibyte, mebibyte, and gibibyte)",
            "example": "400m"
          }
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Unexpected server error"
        },
        "error": {
          "type": "object"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about MockFog2",
    "url": "https://github.com/MoeweX/MockFog2"
  }
}